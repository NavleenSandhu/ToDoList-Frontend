{"ast":null,"code":"var _jsxFileName = \"C:\\\\Javascript projects\\\\todolist-frontend\\\\src\\\\context\\\\TaskState.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport TaskContext from './TaskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskState = props => {\n  _s();\n  const [tasks, setTasks] = useState([{\n    taskDescription: '',\n    dueDate: ''\n  }]);\n  async function getTasks() {\n    const response = await fetch('http://localhost:5000/tasks', {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo1fSwiaWF0IjoxNzA0NzY1ODcwfQ.gee66hhxU7DmQMOReq9B67VqMzdP9j22rmvjoRwsKzE\"\n      }\n    });\n    const json = await response.json();\n    setTasks(json);\n  }\n  async function add(taskDescription, dueDate) {\n    await fetch('http://localhost:5000/tasks', {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo1fSwiaWF0IjoxNzA0NzY1ODcwfQ.gee66hhxU7DmQMOReq9B67VqMzdP9j22rmvjoRwsKzE\"\n      },\n      body: JSON.stringify({\n        taskDescription: taskDescription,\n        dueDate: dueDate\n      })\n    });\n    setTasks(tasks.concat([{\n      TASK_ID: tasks[-1].TASK,\n      TASK_DESCRIPTION: taskDescription,\n      DUE_DATE: dueDate\n    }]));\n  }\n  async function editTask(id, taskDescription, dueDate) {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo1fSwiaWF0IjoxNzA0NzY1ODcwfQ.gee66hhxU7DmQMOReq9B67VqMzdP9j22rmvjoRwsKzE\"\n      },\n      body: JSON.stringify({\n        taskDescription: taskDescription,\n        dueDate: dueDate\n      })\n    });\n    let newTasks = JSON.parse(JSON.stringify(tasks));\n    for (let index = 0; index < newTasks.length; index++) {\n      const element = newTasks[index];\n      if (element.taskId === id) {\n        newTasks[index].taskDescription = taskDescription;\n        newTasks[index].dueDate = dueDate;\n        break;\n      }\n    }\n    setTasks(newTasks);\n  }\n  async function deleteTask(id) {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"DELETE\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo1fSwiaWF0IjoxNzA0NzY1ODcwfQ.gee66hhxU7DmQMOReq9B67VqMzdP9j22rmvjoRwsKzE\"\n      }\n    });\n    const newTasks = tasks.filter(task => {\n      return task.taskId !== id;\n    });\n    setTasks(newTasks);\n  }\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      setTasks,\n      getTasks,\n      add,\n      editTask,\n      deleteTask\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskState, \"j+fZIMO/z8vCyUjgjZWjHa6YHRA=\");\n_c = TaskState;\nexport default TaskState;\nvar _c;\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"names":["useState","TaskContext","jsxDEV","_jsxDEV","TaskState","props","_s","tasks","setTasks","taskDescription","dueDate","getTasks","response","fetch","method","mode","headers","json","add","body","JSON","stringify","concat","TASK_ID","TASK","TASK_DESCRIPTION","DUE_DATE","editTask","id","newTasks","parse","index","length","element","taskId","deleteTask","filter","task","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Javascript projects/todolist-frontend/src/context/TaskState.js"],"sourcesContent":["import { useState } from 'react';\r\nimport TaskContext from './TaskContext'\r\n\r\nconst TaskState = (props) => {\r\n    const [tasks, setTasks] = useState([{ taskDescription: '', dueDate: '' }]);\r\n    async function getTasks() {\r\n        const response = await fetch('http://localhost:5000/tasks', {\r\n            method: \"GET\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo1fSwiaWF0IjoxNzA0NzY1ODcwfQ.gee66hhxU7DmQMOReq9B67VqMzdP9j22rmvjoRwsKzE\"\r\n            }\r\n        })\r\n        const json = await response.json()\r\n        setTasks(json)\r\n    }\r\n\r\n    async function add(taskDescription, dueDate) {\r\n        await fetch('http://localhost:5000/tasks', {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo1fSwiaWF0IjoxNzA0NzY1ODcwfQ.gee66hhxU7DmQMOReq9B67VqMzdP9j22rmvjoRwsKzE\"\r\n            },\r\n            body: JSON.stringify({ taskDescription: taskDescription, dueDate: dueDate })\r\n        })\r\n        setTasks(tasks.concat([{TASK_ID: tasks[-1].TASK, TASK_DESCRIPTION: taskDescription, DUE_DATE: dueDate }]))\r\n    }\r\n\r\n    async function editTask(id, taskDescription, dueDate) {\r\n        await fetch(`http://localhost:5000/tasks/${id}`, {\r\n            method: \"PUT\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo1fSwiaWF0IjoxNzA0NzY1ODcwfQ.gee66hhxU7DmQMOReq9B67VqMzdP9j22rmvjoRwsKzE\"\r\n            },\r\n            body: JSON.stringify({ taskDescription: taskDescription, dueDate: dueDate })\r\n        })\r\n        let newTasks = JSON.parse(JSON.stringify(tasks))\r\n        for (let index = 0; index < newTasks.length; index++) {\r\n            const element = newTasks[index];\r\n            if (element.taskId === id) {\r\n                newTasks[index].taskDescription = taskDescription;\r\n                newTasks[index].dueDate = dueDate;\r\n                break;\r\n            }\r\n        }\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    async function deleteTask(id) {\r\n        await fetch(`http://localhost:5000/tasks/${id}`, {\r\n            method: \"DELETE\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo1fSwiaWF0IjoxNzA0NzY1ODcwfQ.gee66hhxU7DmQMOReq9B67VqMzdP9j22rmvjoRwsKzE\"\r\n            }\r\n        })\r\n        const newTasks = tasks.filter((task) => { return task.taskId !== id })\r\n        setTasks(newTasks)\r\n    }\r\n    return (\r\n        <TaskContext.Provider value={{ tasks, setTasks, getTasks, add, editTask, deleteTask }}>\r\n            {props.children}\r\n        </TaskContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TaskState"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}